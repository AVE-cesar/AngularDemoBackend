/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-MyCelerioPack:springboot/src/main/java/rest/EntityResource.e.vm.java
 */
package com.jaxio.demo.rest;

import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.inject.Inject;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jaxio.demo.domain.AppToken;
import com.jaxio.demo.repository.AppTokenRepository;
import com.jaxio.demo.searchrepository.AppTokenSearchRepository;

@RestController
@RequestMapping("/api/appTokens")
public class AppTokenResource {

    private final Logger log = LoggerFactory.getLogger(AppTokenResource.class);

    @Inject
    private AppTokenRepository appTokenRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Inject
    private AppTokenSearchRepository appTokenSearchRepository;

    /**
     * Create a new AppToken.
     */
    @RequestMapping(value = "/", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppToken> create(@RequestBody AppToken appToken) throws URISyntaxException {
        log.debug("Create AppToken : {}", appToken);
        AppToken result = appTokenRepository.save(appToken);
        appTokenSearchRepository.save(appToken);
        return ResponseEntity.created(new URI("/api/appTokens/" + result.getId())).body(result);
    }

    /**
     * Update AppToken.
     */
    @RequestMapping(value = "/", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppToken> update(@RequestBody AppToken appToken) throws URISyntaxException {
        log.debug("Update AppToken : {}", appToken);
        if (appToken.getId() == null) {
            return create(appToken);
        }
        AppToken result = appTokenRepository.save(appToken);
        appTokenSearchRepository.save(appToken);
        return ResponseEntity.ok().body(result);
    }

    /**
     * Find all AppToken.
     * WARNING: if your table has got a lot of records, you will face OutOfMemory error.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AppToken>> findAll() throws URISyntaxException {
        log.debug("Find all AppTokens");
        List<AppToken> list = appTokenRepository.findAll();
        return new ResponseEntity<>(list, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Find all AppToken by page.
     */
    @RequestMapping(value = "/bypage", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppToken> findAllByPage(Pageable pageable) throws URISyntaxException {
        log.debug("Find all by page AppTokens, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        Page<AppToken> page = appTokenRepository.findAll(pageable);
        log.debug("There are " + page.getTotalElements() + " appTokens.");
        return page;
    }

    /**
    * Find by id AppToken (for simple key).
    */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<AppToken> findById(@PathVariable String id) throws URISyntaxException {
        log.debug("Find by id AppTokens : {}.", id);

        AppToken fullyLoadedAppToken = appTokenRepository.findOne(id);

        return Optional.ofNullable(fullyLoadedAppToken).map(appToken -> new ResponseEntity<>(appToken, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Delete by id AppToken (for simple key).
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable String id) throws URISyntaxException {
        log.debug("Delete by id AppTokens : {}.", id);
        appTokenRepository.delete(id);
        appTokenSearchRepository.delete(id);
        return ResponseEntity.ok().build();
    }

    /**
     * Mass deletion (for simple key).
     */
    @RequestMapping(value = "/mass/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<Void> delete(@PathVariable String[] id) throws URISyntaxException {
        log.debug("Delete by id AppTokens : {}.", (Object[]) id);
        Stream.of(id).forEach(item -> {
            appTokenRepository.delete(item);
            appTokenSearchRepository.delete(item);
        });

        return ResponseEntity.ok().build();
    }

    /**
     * Index all AppToken.
     */
    @RequestMapping(value = "/indexAll", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Async
    public void indexAllAppTokens() {
        log.debug("REST request to index all AppTokens, START");
        appTokenRepository.findAll().forEach(p -> {
            log.debug("indexing");
            appTokenSearchRepository.index(p);
        });

        PageRequest request = new PageRequest(0, 1000);
        try {
            Page<AppToken> page = findAllByPage(request);
            page.forEach(p -> appTokenSearchRepository.index(p));

            while (page.hasNext()) {
                request = new PageRequest(request.getPageNumber() + 1, 1000);

                log.debug("we are indexing page: " + (request.getPageNumber() + 1));

                page = findAllByPage(request);
                page.forEach(p -> appTokenSearchRepository.index(p));
            }
        } catch (Exception e) {
            log.error("", e);
        }

        log.debug("REST request to index all AppTokens, EXIT");
    }

    /**
     * Search with ElasticSearch.
     */
    @RequestMapping(value = "/esearch/{query}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<AppToken> searchAppTokens(@PathVariable String query) {
        return StreamSupport.stream(appTokenSearchRepository.search(queryStringQuery(query)).spliterator(), false).collect(Collectors.toList());
    }

    /**
     * Count AppToken.
     * FIXME: this method should be asynchronous because it can take times to count all records !
     */
    @RequestMapping(value = "/count", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> count() throws URISyntaxException {
        log.debug("Count appTokens");
        long count = appTokenRepository.count();

        return new ResponseEntity<>(count, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Check if a AppToken exists via its id.
     */
    @RequestMapping(value = "/exists/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> exists(@PathVariable String id) throws URISyntaxException {
        log.debug("Check appToken existence via its id: {}.", id);
        Boolean exists = appTokenRepository.exists(id);

        return new ResponseEntity<>(exists, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Search appTokens.
     */
    @RequestMapping(value = "/search", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppToken> search(@RequestBody AppToken appToken, Pageable pageable) throws URISyntaxException {
        log.debug("Search appTokens, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        log.debug("appToken: " + appToken);

        long total = appTokenRepository.count();

        String sqlMainPart = "select * from (select SERIES, TOKEN_VALUE, TOKEN_CREATION_DATE, IP_ADDRESS, USER_AGENT, USER_LOGIN from APP_TOKEN where 1=1";
        String sqlSecondaryPart = "";

        List<Object> values = new ArrayList<Object>();

        if (appToken.getId() != null) {
            sqlSecondaryPart += " and upper(id) like ? ";
            values.add(appToken.getId().toUpperCase() + "%");
        }
        if (appToken.getTokenValue() != null) {
            sqlSecondaryPart += " and upper(tokenValue) like ? ";
            values.add(appToken.getTokenValue().toUpperCase() + "%");
        }
        if (appToken.getTokenCreationDate() != null) {
            sqlSecondaryPart += " and tokenCreationDate = ? ";
            values.add(appToken.getTokenCreationDate());
        }
        if (appToken.getIpAddress() != null) {
            sqlSecondaryPart += " and upper(ipAddress) like ? ";
            values.add(appToken.getIpAddress().toUpperCase() + "%");
        }
        if (appToken.getUserAgent() != null) {
            sqlSecondaryPart += " and upper(userAgent) like ? ";
            values.add(appToken.getUserAgent().toUpperCase() + "%");
        }
        if (appToken.getUserLogin() != null) {
            sqlSecondaryPart += " and upper(userLogin) like ? ";
            values.add(appToken.getUserLogin().toUpperCase() + "%");
        }

        sqlSecondaryPart += ") where rownum <= ?";
        values.add(pageable.getPageSize());

        log.debug("SQL: " + sqlMainPart + " " + sqlSecondaryPart);
        List<AppToken> appTokens = jdbcTemplate.query(sqlMainPart + " " + sqlSecondaryPart, values.toArray(),
                new BeanPropertyRowMapper<AppToken>(AppToken.class));

        Page<AppToken> page = new PageImpl<AppToken>(appTokens, pageable, total);

        return page;
    }

}