/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-MyCelerioPack:springboot/src/main/java/rest/controller/EntityController.e.vm.java
 */
package com.jaxio.demo.rest.controller;

import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jaxio.demo.elasticsearch.repository.AppUserElasticsearchRepository;
import com.jaxio.demo.jpa.model.AppUser;
import com.jaxio.demo.jpa.repository.AppUserJpaRepository;
import com.jaxio.demo.utils.AppUserEntityUtils;

@RestController
@RequestMapping("/api/appUsers")
public class AppUserController {

    private final Logger log = LoggerFactory.getLogger(AppUserController.class);

    @Autowired
    private AppUserJpaRepository appUserJpaRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private AppUserElasticsearchRepository appUserElasticsearchRepository;

    /**
     * Create a new AppUser.
     */
    @RequestMapping(value = "/", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppUser> create(@RequestBody AppUser appUser) throws URISyntaxException {
        log.debug("Create AppUser : {}", appUser);
        AppUser result = appUserJpaRepository.save(appUser);
        appUserElasticsearchRepository.save(AppUserEntityUtils.convertToElasticsearchAppUser(appUser));
        return ResponseEntity.created(new URI("/api/appUsers/" + result.getId())).body(result);
    }

    /**
     * Update AppUser.
     */
    @RequestMapping(value = "/", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppUser> update(@RequestBody AppUser appUser) throws URISyntaxException {
        log.debug("Update AppUser : {}", appUser);
        if (appUser.getId() == null) {
            return create(appUser);
        }
        AppUser result = appUserJpaRepository.save(appUser);
        appUserElasticsearchRepository.save(AppUserEntityUtils.convertToElasticsearchAppUser(appUser));
        return ResponseEntity.ok().body(result);
    }

    /**
     * Find all AppUser.
     * WARNING: if your table has got a lot of records, you will face OutOfMemory error.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AppUser>> findAll() throws URISyntaxException {
        log.debug("Find all AppUsers");
        List<AppUser> list = appUserJpaRepository.findAll();
        return new ResponseEntity<>(list, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Find all AppUser by page.
     */
    @RequestMapping(value = "/bypage", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppUser> findAllByPage(Pageable pageable) throws URISyntaxException {
        log.debug("Find all by page AppUsers, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        Page<AppUser> page = appUserJpaRepository.findAll(pageable);
        log.debug("There are " + page.getTotalElements() + " appUsers.");
        return page;
    }

    /**
    * Find by id AppUser (for simple key).
    */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<AppUser> findById(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id AppUsers : {}.", id);

        AppUser fullyLoadedAppUser = appUserJpaRepository.findOne(id);
        // force object loading from database because of lazy loading settings
        fullyLoadedAppUser.getAppAuthorities().size();

        return Optional.ofNullable(fullyLoadedAppUser).map(appUser -> new ResponseEntity<>(appUser, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Delete by id AppUser (for simple key).
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Delete by id AppUsers : {}.", id);
        appUserJpaRepository.delete(id);
        appUserElasticsearchRepository.delete(id);
        return ResponseEntity.ok().build();
    }

    /**
     * Mass deletion (for simple key).
     */
    @RequestMapping(value = "/mass/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<Void> delete(@PathVariable Integer[] id) throws URISyntaxException {
        log.debug("Delete by id AppUsers : {}.", (Object[]) id);
        Stream.of(id).forEach(item -> {
            appUserJpaRepository.delete(item);
            appUserElasticsearchRepository.delete(item);
        });

        return ResponseEntity.ok().build();
    }

    /**
     * Index all AppUser.
     */
    @RequestMapping(value = "/indexAll", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Async
    public void indexAllAppUsers() {
        log.debug("REST request to index all AppUsers, START");
        appUserJpaRepository.findAll().forEach(p -> {
            log.debug("indexing");
            appUserElasticsearchRepository.index(AppUserEntityUtils.convertToElasticsearchAppUser(p));
        });

        PageRequest request = new PageRequest(0, 1000);
        try {
            Page<AppUser> page = findAllByPage(request);
            page.forEach(p -> appUserElasticsearchRepository.index(AppUserEntityUtils.convertToElasticsearchAppUser(p)));

            while (page.hasNext()) {
                request = new PageRequest(request.getPageNumber() + 1, 1000);

                log.debug("we are indexing page: " + (request.getPageNumber() + 1));

                page = findAllByPage(request);
                page.forEach(p -> appUserElasticsearchRepository.index(AppUserEntityUtils.convertToElasticsearchAppUser(p)));
            }
        } catch (Exception e) {
            log.error("", e);
        }

        log.debug("REST request to index all AppUsers, EXIT");
    }

    /**
     * Search with ElasticSearch.
     */
    @RequestMapping(value = "/esearch/{query}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<com.jaxio.demo.elasticsearch.model.AppUser> searchAppUsers(@PathVariable String query) {
        return StreamSupport.stream(appUserElasticsearchRepository.search(queryStringQuery(query)).spliterator(), false).collect(Collectors.toList());
    }

    /**
     * Count AppUser.
     * FIXME: this method should be asynchronous because it can take times to count all records !
     */
    @RequestMapping(value = "/count", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> count() throws URISyntaxException {
        log.debug("Count appUsers");
        long count = appUserJpaRepository.count();

        return new ResponseEntity<>(count, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Check if a AppUser exists via its id.
     */
    @RequestMapping(value = "/exists/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> exists(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Check appUser existence via its id: {}.", id);
        Boolean exists = appUserJpaRepository.exists(id);

        return new ResponseEntity<>(exists, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Search appUsers.
     */
    @RequestMapping(value = "/search", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppUser> search(@RequestBody AppUser appUser, Pageable pageable) throws URISyntaxException {
        log.debug("Search appUsers, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        log.debug("appUser: " + appUser);

        long total = appUserJpaRepository.count();

        String sqlMainPart = "select * from (select ID, FIRST_NAME, LAST_NAME, EMAIL, LANGUAGE, LOGIN, PASSWORD, ENABLED from APP_USER where 1=1";
        String sqlSecondaryPart = "";

        List<Object> values = new ArrayList<Object>();

        if (appUser.getId() != null) {
            sqlSecondaryPart += " and id = ? ";
            values.add(appUser.getId());
        }
        if (appUser.getFirstName() != null) {
            sqlSecondaryPart += " and upper(firstName) like ? ";
            values.add(appUser.getFirstName().toUpperCase() + "%");
        }
        if (appUser.getLastName() != null) {
            sqlSecondaryPart += " and upper(lastName) like ? ";
            values.add(appUser.getLastName().toUpperCase() + "%");
        }
        if (appUser.getEmail() != null) {
            sqlSecondaryPart += " and upper(email) like ? ";
            values.add(appUser.getEmail().toUpperCase() + "%");
        }
        if (appUser.getLanguage() != null) {
            sqlSecondaryPart += " and upper(language) like ? ";
            values.add(appUser.getLanguage().toUpperCase() + "%");
        }
        if (appUser.getLogin() != null) {
            sqlSecondaryPart += " and upper(login) like ? ";
            values.add(appUser.getLogin().toUpperCase() + "%");
        }
        if (appUser.getPassword() != null) {
            sqlSecondaryPart += " and upper(password) like ? ";
            values.add(appUser.getPassword().toUpperCase() + "%");
        }
        if (appUser.getEnabled() != null) {
            sqlSecondaryPart += " and enabled = ? ";
            values.add(appUser.getEnabled());
        }

        sqlSecondaryPart += ") where rownum <= ?";
        values.add(pageable.getPageSize());

        log.debug("SQL: " + sqlMainPart + " " + sqlSecondaryPart);
        List<AppUser> appUsers = jdbcTemplate.query(sqlMainPart + " " + sqlSecondaryPart, values.toArray(), new BeanPropertyRowMapper<AppUser>(AppUser.class));

        Page<AppUser> page = new PageImpl<AppUser>(appUsers, pageable, total);

        return page;
    }

}