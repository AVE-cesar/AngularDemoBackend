/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-MyCelerioPack:springboot/src/main/java/rest/controller/EntityController.e.vm.java
 */
package com.jaxio.demo.rest.controller;

import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.inject.Inject;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jaxio.demo.elasticsearch.repository.AppParameterElasticsearchRepository;
import com.jaxio.demo.jpa.model.AppParameter;
import com.jaxio.demo.jpa.repository.AppParameterJpaRepository;

@RestController
@RequestMapping("/api/appParameters")
public class AppParameterController {

    private final Logger log = LoggerFactory.getLogger(AppParameterController.class);

    @Inject
    private AppParameterJpaRepository appParameterJpaRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Inject
    private AppParameterElasticsearchRepository appParameterElasticsearchRepository;

    /**
     * Create a new AppParameter.
     */
    @RequestMapping(value = "/", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppParameter> create(@RequestBody AppParameter appParameter) throws URISyntaxException {
        log.debug("Create AppParameter : {}", appParameter);
        AppParameter result = appParameterJpaRepository.save(appParameter);
        appParameterElasticsearchRepository.save(appParameter);
        return ResponseEntity.created(new URI("/api/appParameters/" + result.getId())).body(result);
    }

    /**
     * Update AppParameter.
     */
    @RequestMapping(value = "/", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppParameter> update(@RequestBody AppParameter appParameter) throws URISyntaxException {
        log.debug("Update AppParameter : {}", appParameter);
        if (appParameter.getId() == null) {
            return create(appParameter);
        }
        AppParameter result = appParameterJpaRepository.save(appParameter);
        appParameterElasticsearchRepository.save(appParameter);
        return ResponseEntity.ok().body(result);
    }

    /**
     * Find all AppParameter.
     * WARNING: if your table has got a lot of records, you will face OutOfMemory error.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AppParameter>> findAll() throws URISyntaxException {
        log.debug("Find all AppParameters");
        List<AppParameter> list = appParameterJpaRepository.findAll();
        return new ResponseEntity<>(list, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Find all AppParameter by page.
     */
    @RequestMapping(value = "/bypage", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppParameter> findAllByPage(Pageable pageable) throws URISyntaxException {
        log.debug("Find all by page AppParameters, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        Page<AppParameter> page = appParameterJpaRepository.findAll(pageable);
        log.debug("There are " + page.getTotalElements() + " appParameters.");
        return page;
    }

    /**
    * Find by id AppParameter (for simple key).
    */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<AppParameter> findById(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id AppParameters : {}.", id);

        AppParameter fullyLoadedAppParameter = appParameterJpaRepository.findOne(id);

        return Optional.ofNullable(fullyLoadedAppParameter).map(appParameter -> new ResponseEntity<>(appParameter, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Delete by id AppParameter (for simple key).
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Delete by id AppParameters : {}.", id);
        appParameterJpaRepository.delete(id);
        appParameterElasticsearchRepository.delete(id);
        return ResponseEntity.ok().build();
    }

    /**
     * Mass deletion (for simple key).
     */
    @RequestMapping(value = "/mass/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<Void> delete(@PathVariable Integer[] id) throws URISyntaxException {
        log.debug("Delete by id AppParameters : {}.", (Object[]) id);
        Stream.of(id).forEach(item -> {
            appParameterJpaRepository.delete(item);
            appParameterElasticsearchRepository.delete(item);
        });

        return ResponseEntity.ok().build();
    }

    /**
     * Index all AppParameter.
     */
    @RequestMapping(value = "/indexAll", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Async
    public void indexAllAppParameters() {
        log.debug("REST request to index all AppParameters, START");
        appParameterJpaRepository.findAll().forEach(p -> {
            log.debug("indexing");
            appParameterElasticsearchRepository.index(p);
        });

        PageRequest request = new PageRequest(0, 1000);
        try {
            Page<AppParameter> page = findAllByPage(request);
            page.forEach(p -> appParameterElasticsearchRepository.index(p));

            while (page.hasNext()) {
                request = new PageRequest(request.getPageNumber() + 1, 1000);

                log.debug("we are indexing page: " + (request.getPageNumber() + 1));

                page = findAllByPage(request);
                page.forEach(p -> appParameterElasticsearchRepository.index(p));
            }
        } catch (Exception e) {
            log.error("", e);
        }

        log.debug("REST request to index all AppParameters, EXIT");
    }

    /**
     * Search with ElasticSearch.
     */
    @RequestMapping(value = "/esearch/{query}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<AppParameter> searchAppParameters(@PathVariable String query) {
        return StreamSupport.stream(appParameterElasticsearchRepository.search(queryStringQuery(query)).spliterator(), false).collect(Collectors.toList());
    }

    /**
     * Count AppParameter.
     * FIXME: this method should be asynchronous because it can take times to count all records !
     */
    @RequestMapping(value = "/count", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> count() throws URISyntaxException {
        log.debug("Count appParameters");
        long count = appParameterJpaRepository.count();

        return new ResponseEntity<>(count, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Check if a AppParameter exists via its id.
     */
    @RequestMapping(value = "/exists/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> exists(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Check appParameter existence via its id: {}.", id);
        Boolean exists = appParameterJpaRepository.exists(id);

        return new ResponseEntity<>(exists, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Search appParameters.
     */
    @RequestMapping(value = "/search", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppParameter> search(@RequestBody AppParameter appParameter, Pageable pageable) throws URISyntaxException {
        log.debug("Search appParameters, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        log.debug("appParameter: " + appParameter);

        long total = appParameterJpaRepository.count();

        String sqlMainPart = "select * from (select ID, DOMAIN, KEY, VALUE from APP_PARAMETER where 1=1";
        String sqlSecondaryPart = "";

        List<Object> values = new ArrayList<Object>();

        if (appParameter.getId() != null) {
            sqlSecondaryPart += " and id = ? ";
            values.add(appParameter.getId());
        }
        if (appParameter.getDomain() != null) {
            sqlSecondaryPart += " and upper(domain) like ? ";
            values.add(appParameter.getDomain().toUpperCase() + "%");
        }
        if (appParameter.getKey() != null) {
            sqlSecondaryPart += " and upper(key) like ? ";
            values.add(appParameter.getKey().toUpperCase() + "%");
        }
        if (appParameter.getValue() != null) {
            sqlSecondaryPart += " and upper(value) like ? ";
            values.add(appParameter.getValue().toUpperCase() + "%");
        }

        sqlSecondaryPart += ") where rownum <= ?";
        values.add(pageable.getPageSize());

        log.debug("SQL: " + sqlMainPart + " " + sqlSecondaryPart);
        List<AppParameter> appParameters = jdbcTemplate.query(sqlMainPart + " " + sqlSecondaryPart, values.toArray(),
                new BeanPropertyRowMapper<AppParameter>(AppParameter.class));

        Page<AppParameter> page = new PageImpl<AppParameter>(appParameters, pageable, total);

        return page;
    }

    /**
     * Find by domain and key a AppParameter.
     */
    @RequestMapping(value = "/finder/{domain},{key}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppParameter> findById(@PathVariable String domain, @PathVariable String key) throws URISyntaxException {
        log.debug("Find by domain and key AppParameters : " + domain + ", " + key);

        AppParameter appParameter = appParameterJpaRepository.findByDomainAndKey(domain, key);

        return new ResponseEntity<AppParameter>(appParameter, HttpStatus.OK);
    }
}