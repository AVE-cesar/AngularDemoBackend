/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-MyCelerioPack:springboot/src/main/java/rest/controller/EntityController.e.vm.java
 */
package com.jaxio.demo.rest.controller;

import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import javax.inject.Inject;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jaxio.demo.elasticsearch.repository.AppAuthorityElasticsearchRepository;
import com.jaxio.demo.jpa.model.AppAuthority;
import com.jaxio.demo.jpa.repository.AppAuthorityJpaRepository;

@RestController
@RequestMapping("/api/appAuthorities")
public class AppAuthorityController {

    private final Logger log = LoggerFactory.getLogger(AppAuthorityController.class);

    @Inject
    private AppAuthorityJpaRepository appAuthorityJpaRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Inject
    private AppAuthorityElasticsearchRepository appAuthorityElasticsearchRepository;

    /**
     * Create a new AppAuthority.
     */
    @RequestMapping(value = "/", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppAuthority> create(@RequestBody AppAuthority appAuthority) throws URISyntaxException {
        log.debug("Create AppAuthority : {}", appAuthority);
        AppAuthority result = appAuthorityJpaRepository.save(appAuthority);
        appAuthorityElasticsearchRepository.save(appAuthority);
        return ResponseEntity.created(new URI("/api/appAuthorities/" + result.getId())).body(result);
    }

    /**
     * Update AppAuthority.
     */
    @RequestMapping(value = "/", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<AppAuthority> update(@RequestBody AppAuthority appAuthority) throws URISyntaxException {
        log.debug("Update AppAuthority : {}", appAuthority);
        if (appAuthority.getId() == null) {
            return create(appAuthority);
        }
        AppAuthority result = appAuthorityJpaRepository.save(appAuthority);
        appAuthorityElasticsearchRepository.save(appAuthority);
        return ResponseEntity.ok().body(result);
    }

    /**
     * Find all AppAuthority.
     * WARNING: if your table has got a lot of records, you will face OutOfMemory error.
     */
    @RequestMapping(value = "/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AppAuthority>> findAll() throws URISyntaxException {
        log.debug("Find all AppAuthorities");
        List<AppAuthority> list = appAuthorityJpaRepository.findAll();
        return new ResponseEntity<>(list, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Find all AppAuthority by page.
     */
    @RequestMapping(value = "/bypage", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppAuthority> findAllByPage(Pageable pageable) throws URISyntaxException {
        log.debug("Find all by page AppAuthorities, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        Page<AppAuthority> page = appAuthorityJpaRepository.findAll(pageable);
        log.debug("There are " + page.getTotalElements() + " appAuthorities.");
        return page;
    }

    /**
    * Find by id AppAuthority (for simple key).
    */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<AppAuthority> findById(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id AppAuthorities : {}.", id);

        AppAuthority fullyLoadedAppAuthority = appAuthorityJpaRepository.findOne(id);

        return Optional.ofNullable(fullyLoadedAppAuthority).map(appAuthority -> new ResponseEntity<>(appAuthority, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Delete by id AppAuthority (for simple key).
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Delete by id AppAuthorities : {}.", id);
        appAuthorityJpaRepository.delete(id);
        appAuthorityElasticsearchRepository.delete(id);
        return ResponseEntity.ok().build();
    }

    /**
     * Mass deletion (for simple key).
     */
    @RequestMapping(value = "/mass/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Transactional
    public ResponseEntity<Void> delete(@PathVariable Integer[] id) throws URISyntaxException {
        log.debug("Delete by id AppAuthorities : {}.", (Object[]) id);
        Stream.of(id).forEach(item -> {
            appAuthorityJpaRepository.delete(item);
            appAuthorityElasticsearchRepository.delete(item);
        });

        return ResponseEntity.ok().build();
    }

    /**
     * Index all AppAuthority.
     */
    @RequestMapping(value = "/indexAll", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Async
    public void indexAllAppAuthorities() {
        log.debug("REST request to index all AppAuthorities, START");
        appAuthorityJpaRepository.findAll().forEach(p -> {
            log.debug("indexing");
            appAuthorityElasticsearchRepository.index(p);
        });

        PageRequest request = new PageRequest(0, 1000);
        try {
            Page<AppAuthority> page = findAllByPage(request);
            page.forEach(p -> appAuthorityElasticsearchRepository.index(p));

            while (page.hasNext()) {
                request = new PageRequest(request.getPageNumber() + 1, 1000);

                log.debug("we are indexing page: " + (request.getPageNumber() + 1));

                page = findAllByPage(request);
                page.forEach(p -> appAuthorityElasticsearchRepository.index(p));
            }
        } catch (Exception e) {
            log.error("", e);
        }

        log.debug("REST request to index all AppAuthorities, EXIT");
    }

    /**
     * Search with ElasticSearch.
     */
    @RequestMapping(value = "/esearch/{query}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<AppAuthority> searchAppAuthoritys(@PathVariable String query) {
        return StreamSupport.stream(appAuthorityElasticsearchRepository.search(queryStringQuery(query)).spliterator(), false).collect(Collectors.toList());
    }

    /**
     * Count AppAuthority.
     * FIXME: this method should be asynchronous because it can take times to count all records !
     */
    @RequestMapping(value = "/count", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Long> count() throws URISyntaxException {
        log.debug("Count appAuthorities");
        long count = appAuthorityJpaRepository.count();

        return new ResponseEntity<>(count, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Check if a AppAuthority exists via its id.
     */
    @RequestMapping(value = "/exists/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Boolean> exists(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Check appAuthority existence via its id: {}.", id);
        Boolean exists = appAuthorityJpaRepository.exists(id);

        return new ResponseEntity<>(exists, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Search appAuthorities.
     */
    @RequestMapping(value = "/search", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Page<AppAuthority> search(@RequestBody AppAuthority appAuthority, Pageable pageable) throws URISyntaxException {
        log.debug("Search appAuthorities, page: " + pageable.getPageNumber() + ", size: " + pageable.getPageSize());
        log.debug("appAuthority: " + appAuthority);

        long total = appAuthorityJpaRepository.count();

        String sqlMainPart = "select * from (select ID, NAME from APP_AUTHORITY where 1=1";
        String sqlSecondaryPart = "";

        List<Object> values = new ArrayList<Object>();

        if (appAuthority.getId() != null) {
            sqlSecondaryPart += " and id = ? ";
            values.add(appAuthority.getId());
        }
        if (appAuthority.getName() != null) {
            sqlSecondaryPart += " and upper(name) like ? ";
            values.add(appAuthority.getName().toUpperCase() + "%");
        }

        sqlSecondaryPart += ") where rownum <= ?";
        values.add(pageable.getPageSize());

        log.debug("SQL: " + sqlMainPart + " " + sqlSecondaryPart);
        List<AppAuthority> appAuthorities = jdbcTemplate.query(sqlMainPart + " " + sqlSecondaryPart, values.toArray(),
                new BeanPropertyRowMapper<AppAuthority>(AppAuthority.class));

        Page<AppAuthority> page = new PageImpl<AppAuthority>(appAuthorities, pageable, total);

        return page;
    }

}